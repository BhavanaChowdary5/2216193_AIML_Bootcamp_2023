{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMVgFSpXUABEFEoUwJ3wE89",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/BhavanaChowdary5/2216193_AIML_Bootcamp_2023/blob/main/Untitled7.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P0g9QkJMbzJR",
        "outputId": "9ee5642f-8a68-4918-b105-9413be72cc2d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n",
            "4\n",
            "Hi, Areefa!\n",
            "HI, AREEFA AKKA!\n",
            "hi, areefa akka!\n",
            "['Shiva', ' Areefa!']\n"
          ]
        }
      ],
      "source": [
        "#1.\tImplement the methods of String with examples.\n",
        "#len - length of the string.\n",
        "string = \"Hi, Shiva anna!\"\n",
        "print(len(string))\n",
        "#find -  index of the first occurrence of a specified substring\n",
        "string = \"Hi, Shiva anna!\"\n",
        "print(string.find(\"Shiva\"))\n",
        "#replace - replaces a specified substring with another substring\n",
        "string = \"Hi, Shiva!\"\n",
        "print(string.replace(\"Shiva\", \"Areefa\"))\n",
        "#upper -   all characters in a string to uppercase\n",
        "string = \"Hi, Areefa Akka!\"\n",
        "print(string.upper())\n",
        "#lower -  all characters in a string to lowercase\n",
        "string = \"Hi, Areefa Akka!\"\n",
        "print(string.lower())\n",
        "#split - string into a list of substrings\n",
        "string = \"Shiva, Areefa!\"\n",
        "print(string.split(\",\"))\n",
        "     "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2. Implement the methods of List with examples\n",
        "#append - adds an element to the end of the list\n",
        "my_list = [5, 6, 7]\n",
        "my_list.append(8)\n",
        "print(my_list)\n",
        "#insert - inserts an element at a specified index in the list\n",
        "my_list = [1,2 , 3]\n",
        "my_list.insert(1, 5)\n",
        "print(my_list)\n",
        "#extent - adds all elements of an a list to the end of the current list\n",
        "my_list = [1, 2, 3]\n",
        "new_list = [4, 5, 6]\n",
        "my_list.extend(new_list)\n",
        "print(my_list)\n",
        "#remove - removes the first occurrence of a specified element from the list\n",
        "my_list = [1, 2, 3, 4, 5, 6]\n",
        "my_list.remove(4)\n",
        "print(my_list)\n",
        "#pop - removes the element at the specified index from the list and returns it. If no index is specified, it removes and returns the last element\n",
        "my_list = [1, 2, 3, 4, 5, 6]\n",
        "item = my_list.pop(2)\n",
        "print(item)\n",
        "print(my_list)\n",
        "#index - returns the index of the first occurrence of a specified element in the list\n",
        "my_list = [1, 2, 3, 4, 5, 6]\n",
        "index = my_list.index(4)\n",
        "print(index)\n",
        "#count - returns the number of times a specified element appears in the list\n",
        "my_list = [1, 2, 3, 4, 5, 6, 4, 3]\n",
        "count = my_list.count(3)\n",
        "print(count)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LBwX7aePdQwc",
        "outputId": "58817b42-2e31-4263-b1fa-2e4dc21de1bf"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 6, 7, 8]\n",
            "[1, 5, 2, 3]\n",
            "[1, 2, 3, 4, 5, 6]\n",
            "[1, 2, 3, 5, 6]\n",
            "3\n",
            "[1, 2, 4, 5, 6]\n",
            "3\n",
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3.\tImplement the methods of Tuple with examples.\n",
        "#count() no. of times a specified element appears in the tuple\n",
        "my_tuple = (1, 2, 3, 4, 5, 6, 4, 3)\n",
        "count = my_tuple.count(5)\n",
        "print(count)\n",
        "#index() index of the first occurrence \n",
        "my_tuple = (1, 2, 3, 4, 5, 6)\n",
        "index = my_tuple.index(4)\n",
        "print(index)\n",
        "#len() \n",
        "my_tuple = (1, 2, 3, 4, 5, 6)\n",
        "print(len(my_tuple))\n",
        "#min()\n",
        "my_tuple = (1, 2, 3, 4, 5, 6)\n",
        "print(min(my_tuple))\n",
        "#max() - \n",
        "my_tuple = (1, 2, 3, 4, 5, 6)\n",
        "print(max(my_tuple))\n",
        "#sorted() \n",
        "my_tuple = (1, 2, 3, 4, 5, 6)\n",
        "sorted_tuple = sorted(my_tuple)\n",
        "print(sorted_tuple)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uP9wQjcOdrqd",
        "outputId": "fd85121e-bc8f-4bb3-e6e8-8e4ab0255013"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "3\n",
            "6\n",
            "1\n",
            "6\n",
            "[1, 2, 3, 4, 5, 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#4. Implement the methods of Dictionary with examples.\n",
        "#clear() - This method removes all items from the dictionary.\n",
        "my_dict = {'name': 'Shiva', 'age': 25}\n",
        "my_dict.clear()\n",
        "print(my_dict)\n",
        "#copy() - This method returns a shallow copy of the dictionary.\n",
        "my_dict = {'name': 'Shiva', 'age': 30}\n",
        "new_dict = my_dict.copy()\n",
        "print(new_dict)\n",
        "#items() - This method returns a view object that displays a list of the dictionary's (key, value) tuple pairs.\n",
        "my_dict = {'name': 'Shiva', 'age': 30}\n",
        "items = my_dict.items()\n",
        "print(items)\n",
        "#keys() - This method returns a view object that displays a list of the dictionary's keys.\n",
        "my_dict = {'name': 'Shiva', 'age': 30}\n",
        "keys = my_dict.keys()\n",
        "print(keys)\n",
        "#pop() - This method removes and returns an element with the specified key. If the key is not found, it returns a specified default value.\n",
        "my_dict = {'name': 'Shiva', 'age': 30}\n",
        "age = my_dict.pop('age', None)\n",
        "print(age)\n",
        "print(my_dict)\n",
        "#popitem() - This method removes and returns an arbitrary (key, value) pair from the dictionary.\n",
        "my_dict = {'name': 'Shiva', 'age': 30}\n",
        "item = my_dict.popitem()\n",
        "print(item)\n",
        "print(my_dict)\n",
        "#update() - This method updates the dictionary with the key/value pairs from another dictionary or from an iterable of key/value pairs.\n",
        "my_dict = {'name': 'Shiva', 'age': 30}\n",
        "new_dict = {'gender': 'male'}\n",
        "my_dict.update(new_dict)\n",
        "print(my_dict)\n",
        "    "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HVh5Or9Sd_2g",
        "outputId": "f9da27e2-04b8-4227-a316-b70ec3e66600"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{}\n",
            "{'name': 'Shiva', 'age': 30}\n",
            "dict_items([('name', 'Shiva'), ('age', 30)])\n",
            "dict_keys(['name', 'age'])\n",
            "30\n",
            "{'name': 'Shiva'}\n",
            "('age', 30)\n",
            "{'name': 'Shiva'}\n",
            "{'name': 'Shiva', 'age': 30, 'gender': 'male'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#6.\tWrite a python program to convert Decimal to Binary, Octal and Hexadecimal with direct method.\n",
        "decimal_num = 50\n",
        "# convert to binary\n",
        "binary_num = bin(decimal_num)\n",
        "print(binary_num)\n",
        "# convert to octal\n",
        "octal_num = oct(decimal_num)\n",
        "print(octal_num)\n",
        "# convert to hexadecimal\n",
        "hexadecimal_num = hex(decimal_num)\n",
        "print(hexadecimal_num)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_bI3cijJekrn",
        "outputId": "48cedaa7-9146-4236-ba44-a590e2abd857"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0b110010\n",
            "0o62\n",
            "0x32\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#7. Implement Arithmetic operators with examples.\n",
        "# + (addition) \n",
        "x = 20\n",
        "y = 10\n",
        "result = x + y\n",
        "print(result)\n",
        "# - (subtraction) \n",
        "x = 20\n",
        "y = 10\n",
        "result = x - y\n",
        "print(result)\n",
        "# * (multiplication) \n",
        "x = 20\n",
        "y = 10\n",
        "result = x * y\n",
        "print(result)\n",
        "Output: 15\n",
        "# / (division)\n",
        "x = 20\n",
        "y = 10\n",
        "result = x / y\n",
        "print(result)\n",
        "# % (modulus)\n",
        "x = 5\n",
        "y = 3\n",
        "result = x % y\n",
        "print(result)\n",
        "# ** (exponentiation) \n",
        "x = 1\n",
        "y = 3\n",
        "result = x ** y\n",
        "print(result)\n",
        "# // (floor division)\n",
        "x = 5\n",
        "y = 3\n",
        "result = x // y\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VLBC5e0Veutz",
        "outputId": "78010f15-2cec-4545-ac63-a5bd68ca27b1"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "30\n",
            "10\n",
            "200\n",
            "2.0\n",
            "2\n",
            "1\n",
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 8.\tImplement Assignment operators with examples.\n",
        "# =\n",
        "x = 2\n",
        "print(x)\n",
        "# += \n",
        "x = 2\n",
        "x += 3 # same as x = x + 3\n",
        "print(x)\n",
        "# -=\n",
        "x = 5\n",
        "x -= 3 # same as x = x - 3\n",
        "print(x)\n",
        "# *=\n",
        "x = 2\n",
        "x *= 3 # same as x = x * 3\n",
        "print(x)\n",
        "# /= \n",
        "x = 2\n",
        "x /= 3 # same as x = x / 3\n",
        "print(x)\n",
        "# %= \n",
        "x = 6\n",
        "x %= 3 # same as x = x % 3\n",
        "print(x)\n",
        "# //\n",
        "x = 6\n",
        "x //= 3 # same as x = x // 3\n",
        "print(x)\n",
        "# **\n",
        "x = 2\n",
        "x **= 3 # same as x = x ** 3\n",
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gq4SbwPUe9EO",
        "outputId": "a7a27836-7623-4d65-cd8e-3a4ce51fad20"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "5\n",
            "2\n",
            "6\n",
            "0.6666666666666666\n",
            "0\n",
            "2\n",
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 9. Implement Comparison operators with examples.\n",
        "# == (equal to) \n",
        "x = 5\n",
        "y = 3\n",
        "result = x == y\n",
        "print(result)\n",
        "# != (not equal to)\n",
        "x = 5\n",
        "y = 3\n",
        "result = x != y\n",
        "print(result)\n",
        "# > (greater than)\n",
        "x = 5\n",
        "y = 3\n",
        "result = x > y\n",
        "print(result)\n",
        "# < (less than)\n",
        "x = 5\n",
        "y = 3\n",
        "result = x < y\n",
        "print(result)\n",
        "# >=\n",
        "x = 5\n",
        "y = 3\n",
        "result = x >= y\n",
        "print(result)\n",
        "# <=\n",
        "x = 5\n",
        "y = 3\n",
        "result = x <= y\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mvlg6g59fNJW",
        "outputId": "9f7397c7-8f31-4521-b41a-95c43aa13679"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n",
            "True\n",
            "False\n",
            "True\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#10.\tImplement Logical operators with examples.\n",
        "# and \n",
        "x = 5\n",
        "result = (x > 0) and (x < 10)\n",
        "print(result)\n",
        "# or \n",
        "x = 5\n",
        "result = (x < 0) or (x > 10)\n",
        "print(result)\n",
        "# not\n",
        "x = 5\n",
        "result = not (x > 0)\n",
        "print(result)\n",
        "# is\n",
        "x = [1,2,3]\n",
        "y = [1,2,3]\n",
        "result = x is y\n",
        "print(result)\n",
        "# is not \n",
        "x = [1,2,3]\n",
        "y = [1,2,3]\n",
        "result = x is not y\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gSL8h8k2fVKg",
        "outputId": "f0e3dc8c-40d3-4052-8530-31b78c9ba72f"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "False\n",
            "False\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#11. Implement Bitwise operators with examples. \n",
        "# & (bitwise AND)\n",
        "x = 5  # binary: 101\n",
        "y = 3  # binary: 011\n",
        "result = x & y\n",
        "print(result)\n",
        "# | (bitwise OR)\n",
        "x = 5  # binary: 101\n",
        "y = 3  # binary: 011\n",
        "result = x | y\n",
        "print(result)\n",
        "# ^ (bitwise XOR) \n",
        "x = 5  # binary: 101\n",
        "y = 3  # binary: 011\n",
        "result = x ^ y\n",
        "print(result)\n",
        "# ~ (bitwise NOT)\n",
        "x = 5  # binary: 101\n",
        "result = ~x\n",
        "print(result)\n",
        "# << (left shift)\n",
        "x = 5  # binary: 101\n",
        "result = x << 1\n",
        "print(result)\n",
        "# >> (right shift)\n",
        "x = 5  # binary: 101\n",
        "result = x >> 1\n",
        "print(result)\n",
        "     "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OHJjmmtrfaLN",
        "outputId": "f083c1f4-d218-45e1-fd38-bbaddfafd710"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "7\n",
            "6\n",
            "-6\n",
            "10\n",
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 12.\tImplement Membership operators with examples.\n",
        "\n",
        "# using the in operator\n",
        "numbers = [\"1\",\"2\",\"3\",\"4\",\"5\"]\n",
        "print(\"8\" in numbers)\n",
        "print(\"2\" in numbers)\n",
        "# using the not in operator\n",
        "numbers = [\"1\",\"2\",\"3\",\"4\",\"5\"]\n",
        "print(\"5\" not in numbers)\n",
        "print(\"6\" not in numbers)\n",
        "# string membership\n",
        "word = \"Shiva\"\n",
        "print(\"e\" in word)\n",
        "print(\"h\" in word)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9VWdFbN2fgeM",
        "outputId": "ab1251ef-828a-4829-fe2d-64422e7b312d"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n",
            "False\n",
            "True\n",
            "False\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 13.\tImplement Identity operators with examples\n",
        "#is\n",
        "x = [\"bhavana\", \"bootcamp\"]\n",
        "y = [\"bhavana\", \"bootcamp\"]\n",
        "z = x\n",
        "print(x is z)\n",
        "print(x is y)\n",
        "print(x == y)\n",
        "#is not\n",
        "x = [\"bhavana\", \"bootcamp\"]\n",
        "y = [\"bhavana\", \"bootcamp\"]\n",
        "z = x\n",
        "print(x is not z)\n",
        "print(x is not y)\n",
        "print(x != y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RDJGMGW1fwqG",
        "outputId": "e72e502c-0d13-40ec-eda3-0b5ecc471325"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "True\n",
            "False\n",
            "True\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 14.\tDemonstrate Negative indexing for List and apply slicing.\n",
        "#negative indexing\n",
        "numbers = [1, 2, 3, 4, 5]\n",
        "# last element\n",
        "x = numbers[-1]\n",
        "# last second element\n",
        "y = numbers[-2]\n",
        "# first element\n",
        "z = numbers[-5]\n",
        "print(x)\n",
        "print(y)\n",
        "print(z)\n",
        "#slicing\n",
        "numbers = [1, 2, 3, 4, 5]\n",
        "\n",
        "# first three elements\n",
        "x = numbers[0:3]\n",
        "print(x)\n",
        "# last three elements\n",
        "y = numbers[-3:]\n",
        "print(y)\n",
        "# middle three elements\n",
        "z = numbers[1:-1]\n",
        "print(z)\n",
        "\n",
        "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "# every 2nd element\n",
        "x = numbers[0::2]\n",
        "print(x)\n",
        "# every 3rd element\n",
        "y = numbers[0::3]\n",
        "print(y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A58e2TU2gDPN",
        "outputId": "7656ec28-5331-4f6d-c1a7-1ac6a925f9e4"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "4\n",
            "1\n",
            "[1, 2, 3]\n",
            "[3, 4, 5]\n",
            "[2, 3, 4]\n",
            "[1, 3, 5, 7, 9]\n",
            "[1, 4, 7, 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 15.\tPredict the output for the given code snippet and justify the result.\n",
        "#print( 'A series of characters designated as one object known as a string’[::-1][4::3] ) \n",
        "#print(\"------\")\n",
        "#print( 'Welcome to Python traing program' [3:10][::-1] )\n",
        "\n",
        "# ANSWER:\n",
        "# The first print statement will output: \"gnirts\"\n",
        "#This is because the string is first reversed using [::-1], which reverses the order of the characters in the string. Then, slicing is applied with [4::3], which starts at the 4th indexed character (the 5th character, since indexing starts at 0) and selects every 3rd character afterwards.\n",
        "\n",
        "#The second print statement will output: \"emoc\"\n",
        "#This is because the string is first sliced with [3:10], which selects characters from the 3rd indexed character (the 4th character) to the 9th indexed character. Then, the selected slice is reversed using [::-1], which reverses the order of the characters in the slice.\n",
        "\n",
        "#So the first print statement prints every 3rd character from the reversed string after 4th position, in this case gnirts. Second print statement print"
      ],
      "metadata": {
        "id": "X31fwk_jgIlk"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 16.\tWrite a python code to get desired output input sting : p_phrase=\"was it a car or a cat I saw\" Output String : WAS I TAC A RO RAC A TI SA W\n",
        "p_phrase = \"was it a car or a cat I saw\"\n",
        "output = ' '.join([word.upper()[::-1] for word in p_phrase.split()])\n",
        "print(output)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EHYt6K1DgT4b",
        "outputId": "3da611b9-25bc-45ee-aa25-2fe3d5cb2864"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SAW TI A RAC RO A TAC I WAS\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#17.\tYou are required to generate a word similar to ZOO, X and Y that denote the number of Zs and Os respectively. The generated word similar to ZOO where Y= 2 * X.\n",
        "#Input X= 2 Output ZZOOOO\n",
        "#Input X= 5 Output ZZZZZOOOOOOOOOO\n",
        "\n",
        "x = 2\n",
        "y = x * 2\n",
        "output = 'Z'*x + 'O'*y\n",
        "print(output)\n",
        "x = 5\n",
        "y = x * 2\n",
        "output = 'Z'*x + 'O'*y\n",
        "print(output)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wrHkgMX0gb88",
        "outputId": "eb3ea5c5-9f93-4d3a-c136-00a8ee90a5d4"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ZZOOOO\n",
            "ZZZZZOOOOOOOOOO\n"
          ]
        }
      ]
    }
  ]
}
